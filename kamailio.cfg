
#!define REGISTER 8

#!substdef "!maxIncomingCalls!2!g"

include_file "vars.cfg"

debug=2
log_stderror=no
log_facility=LOG_LOCAL0

fork=yes
children=2

alias = "EDGE_IP"
listen=udp:CORE_IP:CORE_PORT

disable_tcp=yes

####### Modules and Parmeters Section ########
mpath="/usr/local/kamailio/lib64/kamailio/modules/"

loadmodule "tm.so"
modparam("tm", "fr_timer", 30000)
modparam("tm", "fr_inv_timer", 30000)
modparam("tm", "wt_timer", 2000)
modparam("tm", "restart_fr_on_each_reply", 1)
modparam("tm", "cancel_b_method", 0)

loadmodule "sl.so"
loadmodule "tmx.so"

loadmodule "rr.so"
modparam("rr", "append_fromtag", 0)

loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "ctl.so"
loadmodule "avp.so"
loadmodule "sanity.so"
loadmodule "xlog.so"
loadmodule "pv.so"

loadmodule "usrloc.so"
modparam("usrloc", "db_mode", 0)
modparam("usrloc", "matching_mode", 1)
modparam("usrloc", "desc_time_order", 1)


loadmodule "registrar.so"
modparam("registrar", "received_avp", "$avp(received_nh)")
modparam("registrar", "path_mode", 1)
modparam("registrar", "use_path", 1)
modparam("registrar", "path_use_received", 1)
modparam("registrar", "max_contacts", 5)


loadmodule "htable.so"
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")

loadmodule "uac.so"
modparam("uac","restore_mode","none")

loadmodule "tsilo.so"
modparam("tsilo", "hash_size", 2048)

loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "db_fetch_rows", 500)
modparam("dialog", "dlg_flag", 5)
modparam("dialog", "send_bye", 1)
modparam("dialog", "wait_ack", 0)
modparam("dialog", "timeout_avp", "$avp(dialog_timeout)")

loadmodule "siputils.so"
loadmodule "utils.so"
loadmodule "cfgutils.so"

loadmodule "path.so"
modparam("path", "use_received", 1)

loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/var/run/kamailio_core_fifo")
modparam("mi_fifo", "fifo_user", "root")
modparam("mi_fifo", "fifo_group", "root")


#######--------Routing Logic---------########

route{


    route(REQINIT);

    # CANCEL processing
    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    route(WITHINDLG);

    # handle retransmissions
    if(t_precheck_trans()) {
        t_check_trans();
        exit;
    }
    t_check_trans();

    if (!is_method("REGISTER")) {
       	record_route();
    }

    if(uri != myself) {
        sl_send_reply("403", "Use Proper IP in Domain");
        exit;
    }


    if (is_method("INVITE")) {
        route(INVITE_REQUEST);
        exit;
    }
        
    if (is_method("REGISTER")) {
        route(REGISTER_REQUEST);
        exit;
    }

    sl_send_reply("403", "Method Not Allowed");
    exit;
}

route[REQINIT] {

    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if(is_method("OPTIONS") && uri==myself && $rU==$null) {
        sl_send_reply("200","Keepalive");
        exit;
    }

    if(!sanity_check("1511", "7")) {
        #--xlog("Malformed SIP message from $si:$sp\n");
        exit;
    }
}

route[WITHINDLG] {
    if (!has_totag()) return;

    if (loose_route()) {
        if(is_method("INVITE")) {
            $avp(dialog_id) = $dlg(h_id);
        }

        if (is_method("BYE")) {
            xlog("BYE in Loose Route");

            if(!is_known_dlg()) {
               xlog("BYE doesn't have an existing Dialog\n");
               sl_send_reply("481", "No Dialog Present");
               exit;
            }
        } else if ( is_method("ACK") ) {
            # ACK is forwarded statelessy
            xlog("L_INFO", "ACK in Loose Route");
            if(!is_known_dlg()) {
                #--xlog("L_INFO", "ACK is out of Dialog");
                exit;
            }
        }
        t_relay();
        exit;
    }
    if ( is_method("ACK") ) {
        if ( t_check_trans() ) {
            t_relay();
            exit;
        } else {
            # ACK without matching transaction ... ignore and discard
            exit;
        }
    }
    sl_send_reply("404", "Not here");
    exit;
}

route[REGISTER_REQUEST] {    
    
    if(!save("location", "0x01")) {
        sl_send_reply("500", "Error while saving AOR");
    }

    exit;
}

route[INVITE_REQUEST] {
    if($fU == $rU) {
        sl_send_reply("486", "Dont Call Yourself");
        exit;
    }

    if(!lookup("location")) {
        sl_send_reply("404", "User Not Registered");
        xlog("L_INFO", "Do PUSH Notification Stuff Here");
        exit;
    }

    t_on_reply("REPLY");
    t_on_failure("FAILURE");
    t_relay();
    exit;
}

route[REPLY] {
    xlog("L_INFO", "Process replies coming from the edge proxy");
}

route[FAILURE] {
    xlog("L_INFO", "Process call failures");
    exit;
}




